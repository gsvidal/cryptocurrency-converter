{"version":3,"sources":["hooks/useCurrency.js","hooks/useCryptocurrency.js","components/Error.js","components/Form.js","components/Result.js","components/Loader.js","App.js","reportWebVitals.js","index.js"],"names":["Label","styled","label","Select","select","useCurrency","initialState","options","useState","state","setState","onChange","event","target","value","map","option","code","name","useCryptocurrency","CoinInfo","Name","FullName","Id","ErrorMsg","p","Error","message","FormContainer","section","Button","button","Form","setCurrency","setCryptocurrency","setLoading","cryptoList","setCryptoList","error","setError","currency","SelectCurrency","cryptocurrency","SelectCryptocurrency","useEffect","getAPI","a","axios","get","response","data","Data","action","onSubmit","preventDefault","trim","type","ContainerResult","div","Price","Info","Result","Object","keys","length","PRICE","LOWDAY","HIGHDAY","CHANGEPCT24HOUR","LASTUPDATE","Loader","className","Container","Heading","h1","App","loading","setData","convertCryptocurrency","url","result","DISPLAY","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTAGMA,EAAQC,IAAOC,MAAV,+OAWLC,EAASF,IAAOG,OAAV,4KAiCGC,EAvBK,SAACH,EAAOI,EAAcC,GAExC,MAA4BC,mBAASF,GAArC,mBAAQG,EAAR,KAAeC,EAAf,KAkBA,MAAO,CAAED,EAhBc,kBACrB,eAAC,WAAD,WACE,cAACT,EAAD,UAAQE,IACR,eAACC,EAAD,CACEQ,SAAW,SAAAC,GAAK,OAAIF,EAASE,EAAMC,OAAOC,QAC1CA,MAAOL,EAFT,UAIE,wBAAQK,MAAM,GAAd,mCACEP,EAAQQ,KAAI,SAAAC,GAAM,OAClB,wBAA0BF,MAAOE,EAAOC,KAAxC,SAA+CD,EAAOE,MAAzCF,EAAOC,gBAOIP,ICzC5BV,EAAQC,IAAOC,MAAV,+OAWLC,EAASF,IAAOG,OAAV,4KAkCGe,EAxBW,SAACjB,EAAOI,EAAcC,GAG9C,MAA4BC,mBAASF,GAArC,mBAAQG,EAAR,KAAeC,EAAf,KAkBA,MAAO,CAAED,EAhBoB,kBAC3B,eAAC,WAAD,WACE,cAAC,EAAD,UAAQP,IACR,eAAC,EAAD,CACES,SAAW,SAAAC,GAAK,OAAIF,EAASE,EAAMC,OAAOC,QAC1CA,MAAOL,EAFT,UAIE,wBAAQK,MAAM,GAAd,mCACEP,EAAQQ,KAAI,SAAAC,GAAM,OAClB,wBAAiCF,MAAOE,EAAOI,SAASC,KAAxD,SAA+DL,EAAOI,SAASE,UAAlEN,EAAOI,SAASG,cAOCb,I,iBC1ClCc,EAAWvB,IAAOwB,EAAV,iRAmBCC,EAND,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACd,OACE,cAACH,EAAD,UAAWG,KCVTC,EAAgB3B,IAAO4B,QAAV,gDAGbC,EAAS7B,IAAO8B,OAAV,kUAiGGC,EAhFF,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,kBAAmBC,EAAgB,EAAhBA,WAG7C,EAAsC3B,mBAAS,IAA/C,mBAAQ4B,EAAR,KAAoBC,EAApB,KAEA,EAA4B7B,oBAAS,GAArC,mBAAQ8B,EAAR,KAAeC,EAAf,KAYA,EAAoClC,EAAY,kBAAmB,GAThD,CACjB,CAAEY,KAAM,MAAOC,KAAM,wBACrB,CAAED,KAAM,MAAOC,KAAM,iBACrB,CAAED,KAAM,MAAOC,KAAM,QACrB,CAAED,KAAM,MAAOC,KAAM,uBACrB,CAAED,KAAM,MAAOC,KAAM,iBAIvB,mBAAQsB,EAAR,KAAkBC,EAAlB,KAGA,EAAiDtB,EAAkB,wBAAyB,GAAIiB,GAAhG,mBAAQM,EAAR,KAAwBC,EAAxB,KAGAC,qBAAU,WACR,IAAMC,EAAM,uCAAG,4BAAAC,EAAA,4DACD,0EADC,SAGUC,IAAMC,IAFjB,2EADC,OAGPC,EAHO,OAKbZ,EAAcY,EAASC,KAAKC,MALf,2CAAH,qDAOZN,MACC,IAmBH,OACE,cAACjB,EAAD,UACE,uBACEwB,OAAO,GACPC,SApBe,SAAAzC,GACnBA,EAAM0C,iBAGiB,KAApBd,EAASe,QAA4C,KAA1Bb,EAAea,OAC3ChB,GAAS,IAITA,GAAS,GACTN,EAAYO,GACZN,EAAkBQ,GAClBP,GAAW,KAMX,UAIIG,GACA,cAAC,EAAD,CACEX,QAAQ,qCAGZ,cAACc,EAAD,IACA,cAACE,EAAD,IACA,cAACb,EAAD,CACE0B,KAAK,SADP,6BCxFFC,EAAkBxD,IAAOyD,IAAV,6PAYfC,EAAQ1D,IAAOyD,IAAV,mEAILE,EAAO3D,IAAOwB,EAAV,wFA2BKoC,EArBA,SAAC,GAAY,IAAXX,EAAU,EAAVA,KAEf,GAAgC,IAA7BY,OAAOC,KAAKb,GAAMc,OAAc,OAAO,KAE1C,IAAQC,EAAwDf,EAAxDe,MAAOC,EAAiDhB,EAAjDgB,OAAQC,EAAyCjB,EAAzCiB,QAASC,EAAgClB,EAAhCkB,gBAAiBC,EAAenB,EAAfmB,WAEjD,OACE,eAACZ,EAAD,WACE,eAACE,EAAD,4BAAqB,+BAAOM,OAC5B,eAACL,EAAD,sCAA8B,+BAAOO,OACrC,eAACP,EAAD,qCAA6B,+BAAOM,OACpC,eAACN,EAAD,oCAA4B,+BAAOQ,OACnC,eAACR,EAAD,2BAAmB,+BAAOS,WC1BjBC,G,MATA,WACb,OACE,sBAAKC,UAAU,UAAf,UACE,qBAAKA,UAAU,UACf,qBAAKA,UAAU,eCAfC,EAAYvE,IAAOyD,IAAV,6QAaTe,EAAUxE,IAAOyE,GAAV,+TA+DEC,MA7Cf,WAEE,MAAkCnE,mBAAS,IAA3C,mBAAQgC,EAAR,KAAkBP,EAAlB,KACA,EAA8CzB,mBAAS,IAAvD,mBAAQkC,EAAR,KAAwBR,EAAxB,KACA,EAAgC1B,oBAAS,GAAzC,mBAAQoE,EAAR,KAAiBzC,EAAjB,KACA,EAA0B3B,mBAAS,IAAnC,mBAAQ0C,EAAR,KAAc2B,EAAd,KAkBA,OAhBAjC,qBAAU,WAER,IAAMkC,EAAqB,uCAAG,8BAAAhC,EAAA,yDACZ,KAAbN,EADyB,wDAItBuC,EAJsB,sEAI+CrC,EAJ/C,kBAIuEF,GAJvE,SAMPO,IAAMC,IAAI+B,GANH,OAMtBC,EANsB,OAO5BH,EAAQG,EAAO9B,KAAK+B,QAAQvC,GAAgBF,IAC5CL,GAAW,GARiB,2CAAH,qDAU3B2C,MAEC,CAACtC,EAAUE,EAAgBkC,IAG5B,eAACJ,EAAD,WACE,cAACC,EAAD,uCAGA,cAAC,EAAD,CACExC,YAAaA,EACbC,kBAAmBA,EACnBC,WAAYA,IAEZyC,EAEA,cAAC,EAAD,IAEA,cAAC,EAAD,CACA1B,KAAMA,QChECgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f509da43.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n  display: block;\r\n  margin-top: 2rem;\r\n  font-family: 'Bebas Neue', cursive;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  font-size: 1.6rem;\r\n  @media (min-width: 465px) {\r\n    font-size: 2rem;\r\n  }\r\n`;\r\nconst Select = styled.select`\r\n  display: block;\r\n  width: 100%;\r\n  padding: 1rem;\r\n  border-radius: 5px;\r\n  border: none;\r\n  font-size: 1.1rem;\r\n  -webkit-appearance: none;\r\n`;\r\n\r\nconst useCurrency = (label, initialState, options) => {\r\n  // Custom hook state\r\n  const [ state, setState ] = useState(initialState);\r\n\r\n  const SelectCurrency = () => (\r\n    <Fragment>\r\n      <Label>{label}</Label>\r\n      <Select\r\n        onChange={ event => setState(event.target.value)}\r\n        value={state}\r\n      >\r\n        <option value=\"\">-- Select currency --</option>\r\n        { options.map(option => (\r\n          <option key={option.code} value={option.code}>{option.name}</option>\r\n        ))}\r\n      </Select>\r\n    </Fragment>  \r\n  );\r\n\r\n  // Return state, interface and state updater function\r\n  return [ state, SelectCurrency, setState];\r\n}\r\n\r\nexport default useCurrency;","import React, { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n  display: block;\r\n  margin-top: 2rem;\r\n  font-family: 'Bebas Neue', cursive;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  font-size: 1.6rem;\r\n  @media (min-width: 465px) {\r\n    font-size: 2rem;\r\n  }\r\n`;\r\nconst Select = styled.select`\r\n  display: block;\r\n  width: 100%;\r\n  padding: 1rem;\r\n  border-radius: 5px;\r\n  border: none;\r\n  font-size: 1.1rem;\r\n  -webkit-appearance: none;\r\n`;\r\n\r\nconst useCryptocurrency = (label, initialState, options) => {\r\n\r\n  // Custom hook state\r\n  const [ state, setState ] = useState(initialState);\r\n\r\n  const SelectCryptocurrency = () => (\r\n    <Fragment>\r\n      <Label>{label}</Label>\r\n      <Select\r\n        onChange={ event => setState(event.target.value)}\r\n        value={state}\r\n      >\r\n        <option value=\"\">-- Select currency --</option>\r\n        { options.map(option => (\r\n          <option key={option.CoinInfo.Id} value={option.CoinInfo.Name}>{option.CoinInfo.FullName}</option>\r\n        ))}\r\n      </Select>\r\n    </Fragment>  \r\n  );\r\n\r\n  // Return state, interface and state updater function\r\n  return [ state, SelectCryptocurrency, setState];\r\n}\r\n\r\nexport default useCryptocurrency;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst ErrorMsg = styled.p`\r\n  background-color: #FF000099;\r\n  padding: .5rem;\r\n  margin-top: 1rem;\r\n  border-radius: 5px;\r\n  color: #FFF;\r\n  font-size: 25px;\r\n  text-transform: uppercase;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  font-family: \"Bebas Neue\", cursive;\r\n`;\r\n\r\nconst Error = ({message}) => {\r\n  return(\r\n    <ErrorMsg>{message}</ErrorMsg>\r\n  );\r\n}\r\n\r\nexport default Error;","import React, { useEffect, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport useCurrency from '../hooks/useCurrency';\r\nimport useCryptocurrency from '../hooks/useCryptocurrency';\r\nimport axios from 'axios';\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FormContainer = styled.section`\r\n  max-width: 50vw;\r\n`;\r\nconst Button = styled.button`\r\n  display: block;\r\n  width: 70%;\r\n  padding: 10px;\r\n  margin-top: 40px;\r\n  font-size: 20px;\r\n  border: none;\r\n  border-radius: 10px;\r\n  background-color: #66A2FE;\r\n  color: #FFF;\r\n  transition: background-color .3s ease;\r\n  &:hover {\r\n    background-color: #326AC0;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Form = ({setCurrency, setCryptocurrency, setLoading}) => {\r\n\r\n  // Cryptocurrencies list state\r\n  const [ cryptoList, setCryptoList ] = useState([]);\r\n  // Validation\r\n  const [ error, setError ] = useState(false);\r\n\r\n\r\n  const CURRENCIES = [\r\n    { code: \"USD\", name: \"United States Dollar\"},\r\n    { code: \"MXN\", name: \"Peso Mexicano\"},\r\n    { code: \"EUR\", name: \"Euro\"},\r\n    { code: \"GBP\", name: \"Great Britain Pound\"},\r\n    { code: \"PEN\", name: \"Sol Peruano\"}\r\n  ];\r\n\r\n  // Using custom hook: useCurrency\r\n  const [ currency, SelectCurrency] = useCurrency(\"Select currency\", \"\", CURRENCIES);\r\n\r\n  // Using custom hook: useCryptocurrency\r\n  const [ cryptocurrency, SelectCryptocurrency ] = useCryptocurrency(\"Select cryptocurrency\", \"\", cryptoList);\r\n\r\n  // Make API call\r\n  useEffect(() => {\r\n    const getAPI = async () => {\r\n      const url = \"https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD\";\r\n\r\n      const response = await axios.get(url);\r\n\r\n      setCryptoList(response.data.Data);\r\n    }\r\n    getAPI();\r\n  }, []);\r\n\r\n  // Convert currency\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    // Validate if fields are filled\r\n    if(currency.trim() === \"\"  || cryptocurrency.trim() === \"\") {\r\n      setError(true);\r\n      // return;\r\n    } else {\r\n      //  send data to App component\r\n      setError(false);\r\n      setCurrency(currency);\r\n      setCryptocurrency(cryptocurrency);\r\n      setLoading(true);\r\n    }\r\n  }\r\n\r\n  return(\r\n    <FormContainer>\r\n      <form \r\n        action=\"\"\r\n        onSubmit={handleSubmit}\r\n        >\r\n        { error && \r\n          <Error \r\n            message=\"Error: All fields are required !\"\r\n          />\r\n        }\r\n        <SelectCurrency />\r\n        <SelectCryptocurrency />\r\n        <Button\r\n          type=\"submit\"\r\n        >\r\n          Calculate\r\n        </Button>\r\n      </form>\r\n    </FormContainer>\r\n  );\r\n}\r\n\r\nForm.propTypes = {\r\n  setCurrency: PropTypes.func.isRequired, \r\n  setCryptocurrency: PropTypes.func.isRequired, \r\n  setLoading: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContainerResult = styled.div`\r\n  padding: 20px;\r\n  margin: 20px 0;\r\n  border: 1px solid #FFFFFF88;\r\n  border-radius: 5px;\r\n  background-color: #FFFFFF33;\r\n  color: #FFF;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  span {\r\n    font-weight: bold;\r\n  }\r\n`;\r\nconst Price = styled.div`\r\n  margin: 20px 0;\r\n  font-size: 30px;\r\n`;\r\nconst Info = styled.p`\r\n  color: #FFFFFFAA;\r\n  margin: 15px 0;\r\n  font-size: 18px;\r\n`;\r\n\r\nconst Result = ({data}) => {\r\n\r\n  if(Object.keys(data).length === 0) return null;\r\n\r\n  const { PRICE, LOWDAY, HIGHDAY, CHANGEPCT24HOUR, LASTUPDATE } = data;\r\n\r\n  return(\r\n    <ContainerResult>\r\n      <Price>The price is: <span>{PRICE}</span></Price>\r\n      <Info>Today higher price was: <span>{HIGHDAY}</span></Info>\r\n      <Info>Today lower price was: <span>{LOWDAY}</span></Info>\r\n      <Info>Change last 24 hours: <span>{CHANGEPCT24HOUR}</span></Info>\r\n      <Info>Last update: <span>{LASTUPDATE}</span></Info>\r\n    </ContainerResult>\r\n  );\r\n}\r\n\r\nResult.propTypes = {\r\n  data: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\nimport './Loader.css';\r\n\r\nconst Loader = () => {\r\n  return(\r\n    <div className=\"spinner\">\r\n      <div className=\"cube1\"></div>\r\n      <div className=\"cube2\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;","import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport Form from './components/Form';\nimport Result from './components/Result';\nimport Loader from './components/Loader';\nimport axios from 'axios';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  max-width: 600px;\n  min-height: 800px;\n  height: 100vh;\n  padding: 180px 20px;\n  @media (min-width: 1440px) {\n    width: 600px;\n    margin-left: 10%;\n  }\n`;\nconst Heading = styled.h1`\n  font-family: 'Bebas Neue', cursive;\n  color: #FFF;\n  font-weight: 700;\n  font-size: 40px;\n  \n  @media (min-width: 465px) {\n    font-size: 50px;\n    &::after {\n    content: \"\";\n    width: 135px;\n    height: 6px;\n    background-color: #66A2FE;\n    display: block;\n    }\n  }\n`;\n\nfunction App() {\n\n  const [ currency, setCurrency ] = useState(\"\");\n  const [ cryptocurrency, setCryptocurrency ] = useState(\"\");\n  const [ loading, setLoading ] = useState(false);\n  const [ data, setData ] = useState({});\n\n  useEffect(()=> {\n\n    const convertCryptocurrency = async () => {\n      if(currency === \"\") return;\n\n      // Consult API to get converting\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${cryptocurrency}&tsyms=${currency}`;\n\n      const result = await axios.get(url);\n      setData(result.data.DISPLAY[cryptocurrency][currency]);\n      setLoading(false);\n    }\n    convertCryptocurrency();\n      \n  }, [currency, cryptocurrency, loading])\n\n  return (\n    <Container>\n      <Heading>\n        Convert Cryptocurrencies\n      </Heading>\n      <Form \n        setCurrency={setCurrency}\n        setCryptocurrency={setCryptocurrency}\n        setLoading={setLoading}\n      />\n      { loading \n      ?\n        <Loader/> \n      :\n        <Result \n        data={data}\n        />\n      }\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}